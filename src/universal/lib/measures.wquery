#
# common functions
#
function min_size do
  emit distinct(min(size(%A)))
end

function max_size do
  emit distinct(max(size(%A)))
end

function lcs do
  %l, %r := %A
  %lh := last(%l.hypernym*)
  %rh := last(%r.hypernym*)
  %m := maxby((%lh intersect %rh)$a<$a,size($a.hypernym*[empty(hypernym)])>,2)
  emit as_synset(distinct(%m$a$_<$a>))
end

#
# Path measure
#
function min_path_length do
  %l, %r := %A
  %lcs := lcs(%l, %r)

  %ll := min_size(%l.hypernym*.%lcs)
  %rl := min_size(%r.hypernym*.%lcs)
  emit %ll + %rl - 1
end

function path_measure do
  emit 1/min_path_length(%A)
end

#
# Leacock-Chodorow measure
#
function hierarchy_depth do
  %lcs := lcs(%A)
  %root := last(%lcs.hypernym*[empty(hypernym)])
  emit tree_depth(%root, `hypernym`)
end

function lch_measure do
  emit max(-log(min_path_length(%A)/(2*hierarchy_depth(%A))))
end

#
# Wu-Palmer measure
#
function root_dist do
  emit min_size(%A.hypernym*[empty(hypernym)]) + 1
end

function lcs_dist do
  %s, %lcs := %A
  emit min_size(%s.hypernym*.%lcs) - 1
end

function wup_measure do
  %l, %r := %A
  %lcs := lcs(%l, %r)
  %dl := lcs_dist(%l, %lcs)
  %dr := lcs_dist(%r, %lcs)
  %dlcs := root_dist(%lcs)
  emit 2*%dlcs/(%dl + %dr + 2*%dlcs)
end

#
# information content
#
function ic do
  %s := as_synset(%A)
  %c := tree_sum(%s, `hypernym`, `count`)
  %root := last(%s.hypernym*[empty(hypernym)])
  %d := tree_sum(%root, `hypernym`, `count`)
  emit -log(%c/%d)
end

#
# Resnik measure
#
function res_measure do
  %l, %r := %A
  %lcs := lcs(%l, %r)

  emit ic(%lcs)
end

#
# Jiang-Conrath measure
#
function jcn_measure do
  %l, %r := %A
  %lcs := lcs(%l, %r)
  %dist := ic(%l) + ic(%r) - 2*ic(%lcs)

  if [%dist = 0 or is_nan(%dist)] do
    %r := last(%lcs.hypernym*[empty(hypernym)])
    %d := distinct(max(tree_sum(%r, `hypernym`, `count`)))

    if [%d > 0.01]
       emit 1/-log((%d - 0.01)/%d)
     else
       emit 0
  end else do
    emit 1/%dist
  end
end

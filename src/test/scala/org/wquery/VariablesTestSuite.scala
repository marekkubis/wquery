package org.wquery
import org.testng.annotations.Test

class VariablesTestSuite extends WQueryTestSuite {
  @Test def testGeneratorWithStepVariable() = result of ("{car}$a") should equal ("$a={ cable car:1:n car:5:n } { cable car:1:n car:5:n }\n$a={ car:1:n auto:1:n automobile:1:n machine:6:n motorcar:1:n } { car:1:n auto:1:n automobile:1:n machine:6:n motorcar:1:n }\n$a={ car:2:n railcar:1:n railway car:1:n railroad car:1:n } { car:2:n railcar:1:n railway car:1:n railroad car:1:n }\n$a={ car:4:n elevator car:1:n } { car:4:n elevator car:1:n }\n$a={ car:3:n gondola:3:n } { car:3:n gondola:3:n }\n")

  @Test def generatorWithTooManyStepVariables() = result of ("{car}$a$b") should startWith ("ERROR: Variable $a cannot be bound")

  @Test def stepWithOneVariables() = result of ("{car}.hypernym$a") should equal ("$a={ compartment:2:n } { cable car:1:n car:5:n } hypernym { compartment:2:n }\n$a={ motor vehicle:1:n automotive vehicle:1:n } { car:1:n auto:1:n automobile:1:n machine:6:n motorcar:1:n } hypernym { motor vehicle:1:n automotive vehicle:1:n }\n$a={ wheeled vehicle:1:n } { car:2:n railcar:1:n railway car:1:n railroad car:1:n } hypernym { wheeled vehicle:1:n }\n$a={ compartment:2:n } { car:4:n elevator car:1:n } hypernym { compartment:2:n }\n$a={ compartment:2:n } { car:3:n gondola:3:n } hypernym { compartment:2:n }\n")
  
  @Test def stepWithTwoVariables() = result of ("{car}.hypernym$a$b") should equal ("$a=hypernym $b={ compartment:2:n } { cable car:1:n car:5:n } hypernym { compartment:2:n }\n$a=hypernym $b={ motor vehicle:1:n automotive vehicle:1:n } { car:1:n auto:1:n automobile:1:n machine:6:n motorcar:1:n } hypernym { motor vehicle:1:n automotive vehicle:1:n }\n$a=hypernym $b={ wheeled vehicle:1:n } { car:2:n railcar:1:n railway car:1:n railroad car:1:n } hypernym { wheeled vehicle:1:n }\n$a=hypernym $b={ compartment:2:n } { car:4:n elevator car:1:n } hypernym { compartment:2:n }\n$a=hypernym $b={ compartment:2:n } { car:3:n gondola:3:n } hypernym { compartment:2:n }\n")

  @Test def stepWithThreeVariables() = result of ("{car}.hypernym$a$b$c") should equal ("$a={ cable car:1:n car:5:n } $b=hypernym $c={ compartment:2:n } { cable car:1:n car:5:n } hypernym { compartment:2:n }\n$a={ car:1:n auto:1:n automobile:1:n machine:6:n motorcar:1:n } $b=hypernym $c={ motor vehicle:1:n automotive vehicle:1:n } { car:1:n auto:1:n automobile:1:n machine:6:n motorcar:1:n } hypernym { motor vehicle:1:n automotive vehicle:1:n }\n$a={ car:2:n railcar:1:n railway car:1:n railroad car:1:n } $b=hypernym $c={ wheeled vehicle:1:n } { car:2:n railcar:1:n railway car:1:n railroad car:1:n } hypernym { wheeled vehicle:1:n }\n$a={ car:4:n elevator car:1:n } $b=hypernym $c={ compartment:2:n } { car:4:n elevator car:1:n } hypernym { compartment:2:n }\n$a={ car:3:n gondola:3:n } $b=hypernym $c={ compartment:2:n } { car:3:n gondola:3:n } hypernym { compartment:2:n }\n")

  @Test def stepWithUnnamedVariable() = result of ("{car}.hypernym$a$_$c") should equal ("$a={ cable car:1:n car:5:n } $c={ compartment:2:n } { cable car:1:n car:5:n } hypernym { compartment:2:n }\n$a={ car:1:n auto:1:n automobile:1:n machine:6:n motorcar:1:n } $c={ motor vehicle:1:n automotive vehicle:1:n } { car:1:n auto:1:n automobile:1:n machine:6:n motorcar:1:n } hypernym { motor vehicle:1:n automotive vehicle:1:n }\n$a={ car:2:n railcar:1:n railway car:1:n railroad car:1:n } $c={ wheeled vehicle:1:n } { car:2:n railcar:1:n railway car:1:n railroad car:1:n } hypernym { wheeled vehicle:1:n }\n$a={ car:4:n elevator car:1:n } $c={ compartment:2:n } { car:4:n elevator car:1:n } hypernym { compartment:2:n }\n$a={ car:3:n gondola:3:n } $c={ compartment:2:n } { car:3:n gondola:3:n } hypernym { compartment:2:n }\n")

  @Test def twoStepsWithVariables() = result of ("{car}$a.hypernym$b") should equal ("$a={ cable car:1:n car:5:n } $b={ compartment:2:n } { cable car:1:n car:5:n } hypernym { compartment:2:n }\n$a={ car:1:n auto:1:n automobile:1:n machine:6:n motorcar:1:n } $b={ motor vehicle:1:n automotive vehicle:1:n } { car:1:n auto:1:n automobile:1:n machine:6:n motorcar:1:n } hypernym { motor vehicle:1:n automotive vehicle:1:n }\n$a={ car:2:n railcar:1:n railway car:1:n railroad car:1:n } $b={ wheeled vehicle:1:n } { car:2:n railcar:1:n railway car:1:n railroad car:1:n } hypernym { wheeled vehicle:1:n }\n$a={ car:4:n elevator car:1:n } $b={ compartment:2:n } { car:4:n elevator car:1:n } hypernym { compartment:2:n }\n$a={ car:3:n gondola:3:n } $b={ compartment:2:n } { car:3:n gondola:3:n } hypernym { compartment:2:n }\n")
  
  @Test def threeStepsWithVariables() = result of ("{car}$a.hypernym$b.hypernym$c") should equal ("$a={ cable car:1:n car:5:n } $b={ compartment:2:n } $c={ room:1:n } { cable car:1:n car:5:n } hypernym { compartment:2:n } hypernym { room:1:n }\n$a={ car:1:n auto:1:n automobile:1:n machine:6:n motorcar:1:n } $b={ motor vehicle:1:n automotive vehicle:1:n } $c={ self-propelled vehicle:1:n } { car:1:n auto:1:n automobile:1:n machine:6:n motorcar:1:n } hypernym { motor vehicle:1:n automotive vehicle:1:n } hypernym { self-propelled vehicle:1:n }\n$a={ car:2:n railcar:1:n railway car:1:n railroad car:1:n } $b={ wheeled vehicle:1:n } $c={ container:1:n } { car:2:n railcar:1:n railway car:1:n railroad car:1:n } hypernym { wheeled vehicle:1:n } hypernym { container:1:n }\n$a={ car:2:n railcar:1:n railway car:1:n railroad car:1:n } $b={ wheeled vehicle:1:n } $c={ vehicle:1:n } { car:2:n railcar:1:n railway car:1:n railroad car:1:n } hypernym { wheeled vehicle:1:n } hypernym { vehicle:1:n }\n$a={ car:4:n elevator car:1:n } $b={ compartment:2:n } $c={ room:1:n } { car:4:n elevator car:1:n } hypernym { compartment:2:n } hypernym { room:1:n }\n$a={ car:3:n gondola:3:n } $b={ compartment:2:n } $c={ room:1:n } { car:3:n gondola:3:n } hypernym { compartment:2:n } hypernym { room:1:n }\n")
  
  @Test def UnionRelationalExprWithVariables() = result of ("{room}$a.partial_holonym|hypernym$b") should equal ("$a={ room:1:n } $b={ area:5:n } { room:1:n } hypernym { area:5:n }\n$a={ room:1:n } $b={ building:1:n edifice:1:n } { room:1:n } partial_holonym { building:1:n edifice:1:n }\n")

  @Test def QuantifiedRelationalExprWithVariables() = result of ("{person:1:n}$a.hypernym!$b") should equal ("$a={ person:1:n individual:1:n someone:1:n somebody:1:n mortal:1:n soul:2:n } $b={ organism:1:n being:2:n } { person:1:n individual:1:n someone:1:n somebody:1:n mortal:1:n soul:2:n } hypernym { organism:1:n being:2:n }\n$a={ person:1:n individual:1:n someone:1:n somebody:1:n mortal:1:n soul:2:n } $b={ causal agent:1:n cause:4:n causal agency:1:n } { person:1:n individual:1:n someone:1:n somebody:1:n mortal:1:n soul:2:n } hypernym { causal agent:1:n cause:4:n causal agency:1:n }\n$a={ person:1:n individual:1:n someone:1:n somebody:1:n mortal:1:n soul:2:n } $b={ physical entity:1:n } { person:1:n individual:1:n someone:1:n somebody:1:n mortal:1:n soul:2:n } hypernym { causal agent:1:n cause:4:n causal agency:1:n } hypernym { physical entity:1:n }\n$a={ person:1:n individual:1:n someone:1:n somebody:1:n mortal:1:n soul:2:n } $b={ entity:1:n } { person:1:n individual:1:n someone:1:n somebody:1:n mortal:1:n soul:2:n } hypernym { causal agent:1:n cause:4:n causal agency:1:n } hypernym { physical entity:1:n } hypernym { entity:1:n }\n")
  
  @Test def CrossProductWithVariables() = result of ("{apple}$a,{person}$b") should equal ("$a={ apple:1:n } $b={ person:1:n individual:1:n someone:1:n somebody:1:n mortal:1:n soul:2:n } { apple:1:n } { person:1:n individual:1:n someone:1:n somebody:1:n mortal:1:n soul:2:n }\n$a={ apple:1:n } $b={ person:2:n } { apple:1:n } { person:2:n }\n$a={ apple:1:n } $b={ person:3:n } { apple:1:n } { person:3:n }\n$a={ apple:2:n orchard apple tree:1:n Malus pumila:1:n } $b={ person:1:n individual:1:n someone:1:n somebody:1:n mortal:1:n soul:2:n } { apple:2:n orchard apple tree:1:n Malus pumila:1:n } { person:1:n individual:1:n someone:1:n somebody:1:n mortal:1:n soul:2:n }\n$a={ apple:2:n orchard apple tree:1:n Malus pumila:1:n } $b={ person:2:n } { apple:2:n orchard apple tree:1:n Malus pumila:1:n } { person:2:n }\n$a={ apple:2:n orchard apple tree:1:n Malus pumila:1:n } $b={ person:3:n } { apple:2:n orchard apple tree:1:n Malus pumila:1:n } { person:3:n }\n")
  
}


